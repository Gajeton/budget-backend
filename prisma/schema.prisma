generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  idAuth0 String  @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  name  String?
  travel Travel[]
  destination Destination[]
  categoryIncome CategoryIncome[]
  categoryExpense CategoryExpense[]
  entry Entry[]
}

model Currency {
  id       Int  @id @default(autoincrement())
  title String
  symbol String
  code String
  travel Travel[]
  entry Entry[]
}

model Travel {
  id       Int  @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  destination TravelDestination[]
  currency Currency @relation(fields: [currencyId], references: [id])
  currencyId Int
  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int
  budget Decimal
  entry Entry[]
  startDate  DateTime 
  endDate  DateTime 
  month Int
  week Int
  day Int
  travelCategoryExpense TravelCategoryExpense[]
  travelCategoryIncome TravelCategoryIncome[] 
}

model CategoryIncome {
  id       Int  @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title String
  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int
  entry Entry[]
  travelCategoryIncome TravelCategoryIncome[] 
}

model CategoryExpense {
  id       Int  @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title String
  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int
  entry Entry[]
  travelCategoryExpense TravelCategoryExpense[] 
}

model Destination {
  id       Int  @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int
  title String
  travelDestination TravelDestination[]
}

model TravelDestination {
  travel       Travel     @relation(fields: [travelId], references: [id])
  travelId     Int // relation scalar field (used in the `@relation` attribute above)
  destination   Destination @relation(fields: [destinationId], references: [id])
  destinationId Int // relation scalar field (used in the `@relation` attribute above)
  @@id([travelId, destinationId])
}

model TravelCategoryExpense {
  travel       Travel     @relation(fields: [travelId], references: [id])
  travelId     Int // relation scalar field (used in the `@relation` attribute above)
  categoryExpense   CategoryExpense @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  @@id([travelId, categoryId])
}

model TravelCategoryIncome {
  travel       Travel     @relation(fields: [travelId], references: [id])
  travelId     Int // relation scalar field (used in the `@relation` attribute above)
  categoryIncome   CategoryIncome @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  @@id([travelId, categoryId])
}


model Entry {
  id       Int  @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  date DateTime @default(now())
  amount   Decimal
  currency Currency @relation(fields: [currencyId], references: [id])
  currencyId Int
  travel   Travel @relation(fields: [travelId], references: [id]) 
  travelId Int
  categoryExpense  CategoryExpense? @relation(fields: [categoryExpenseId], references: [id])
  categoryExpenseId Int?
  categoryIncome  CategoryIncome? @relation(fields: [categoryIncomeId], references: [id])
  categoryIncomeId Int?
  creatorId Int
  creator   User @relation(fields: [creatorId], references: [id])
}